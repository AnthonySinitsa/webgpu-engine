#
# Makefile to use with emscripten
# See https://emscripten.org/docs/getting_started/downloads.html
# for installation instructions.
#
# This Makefile assumes you have loaded emscripten's environment.
# (On Windows, you may need to execute emsdk_env.bat or encmdprompt.bat ahead)
#
# Running `make` will produce three files:
#  - web/index.html (current stored in the repository)
#  - web/index.js
#  - web/index.wasm
#
# All three are needed to run the demo.

CC = emcc
CXX = em++
WEB_DIR = web
EXE = $(WEB_DIR)/index.js
IMGUI_DIR = ./external/imgui
SRC_DIR = ./src

# Define source files with their full paths
IMGUI_SOURCES = $(IMGUI_DIR)/imgui.cpp \
                $(IMGUI_DIR)/imgui_demo.cpp \
                $(IMGUI_DIR)/imgui_draw.cpp \
                $(IMGUI_DIR)/imgui_tables.cpp \
                $(IMGUI_DIR)/imgui_widgets.cpp \
                $(IMGUI_DIR)/backends/imgui_impl_glfw.cpp \
                $(IMGUI_DIR)/backends/imgui_impl_wgpu.cpp

SRC_SOURCES = $(SRC_DIR)/main.cpp \
              $(SRC_DIR)/GalaxyWebSystem.cpp \
							$(SRC_DIR)/TriangleRenderer.cpp \
							$(SRC_DIR)/Camera.cpp \
							$(SRC_DIR)/GridRenderer.cpp

ALL_SOURCES = $(SRC_SOURCES) $(IMGUI_SOURCES)

# Generate object file paths, maintaining directory structure
OBJS = $(patsubst $(SRC_DIR)/%.cpp,build/src/%.o,$(SRC_SOURCES)) \
       $(patsubst $(IMGUI_DIR)/%.cpp,build/imgui/%.o,$(IMGUI_SOURCES))

UNAME_S := $(shell uname -s)
CPPFLAGS =
LDFLAGS =
EMS =

# Emscripten options
EMS += -s DISABLE_EXCEPTION_CATCHING=1
LDFLAGS += -s USE_GLFW=3 -s USE_WEBGPU=1
LDFLAGS += -s WASM=1 -s ALLOW_MEMORY_GROWTH=1 -s NO_EXIT_RUNTIME=0 -s ASSERTIONS=1

# Disable filesystem by default
USE_FILE_SYSTEM ?= 0
ifeq ($(USE_FILE_SYSTEM), 0)
LDFLAGS += -s NO_FILESYSTEM=1
CPPFLAGS += -DIMGUI_DISABLE_FILE_FUNCTIONS
endif

# Build flags
CPPFLAGS += -I$(IMGUI_DIR) -I$(IMGUI_DIR)/backends -I./external/glm -I$(SRC_DIR)
CPPFLAGS += -Wall -Wformat -Os $(EMS) -Wno-nontrivial-memaccess -Wno-write-strings
LDFLAGS += $(EMS)

# Create build directory structure
BUILD_DIRS = build/src build/imgui/backends build/imgui

# Add commands for compile_commands.json generation
COMPILE_COMMANDS = compile_commands.json
COMPILE_COMMAND_TEMPLATE = { "directory": "$(CURDIR)", "command": "$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(abspath $<) -o $(abspath $@)", "file": "$(abspath $<)" }

# Build rules
build/src/%.o: $(SRC_DIR)/%.cpp | $(BUILD_DIRS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<
	@echo $(COMPILE_COMMAND_TEMPLATE) >> $(COMPILE_COMMANDS).tmp

build/imgui/%.o: $(IMGUI_DIR)/%.cpp | $(BUILD_DIRS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<
	@echo $(COMPILE_COMMAND_TEMPLATE) >> $(COMPILE_COMMANDS).tmp

build/imgui/backends/%.o: $(IMGUI_DIR)/backends/%.cpp | $(BUILD_DIRS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c -o $@ $<
	@echo $(COMPILE_COMMAND_TEMPLATE) >> $(COMPILE_COMMANDS).tmp

all: clean-compile-commands $(EXE)
	@echo Build complete for $(EXE)

$(BUILD_DIRS):
	mkdir -p $@

$(WEB_DIR):
	mkdir -p $@

serve: all
	python3 -m http.server -d $(WEB_DIR)

$(EXE): $(OBJS) $(WEB_DIR)
	$(CXX) -o $@ $(OBJS) $(LDFLAGS)
	@echo "[" > $(COMPILE_COMMANDS)
	@cat $(COMPILE_COMMANDS).tmp | sed 's/}{/},{/g' >> $(COMPILE_COMMANDS)
	@echo "]" >> $(COMPILE_COMMANDS)
	@rm $(COMPILE_COMMANDS).tmp

clean-compile-commands:
	@rm -f $(COMPILE_COMMANDS) $(COMPILE_COMMANDS).tmp

clean: clean-compile-commands
	rm -rf build $(WEB_DIR)/*.js $(WEB_DIR)/*.wasm $(WEB_DIR)/*.wasm.pre

# Print debug information
debug:
	@echo "Source files:"
	@echo "$(ALL_SOURCES)" | tr ' ' '\n'
	@echo "\nObject files:"
	@echo "$(OBJS)" | tr ' ' '\n'